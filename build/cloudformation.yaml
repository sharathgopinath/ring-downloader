AWSTemplateFormatVersion: '2010-09-09'
Transform: "AWS::Serverless-2016-10-31"
Description: ring-downloader

Parameters:
  BranchName:
    Type: String
    Description: Name of the branch.

Conditions:
  IsProd: !Equals [!Ref BranchName, 'main']

Resources:
  RingCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Credentials to access ring account
      Name: !Sub /${AWS::StackName}/RingCredentials
      SecretString:
        "{\"username\": \"replace-me\", \"password\": \"replace-me\", \"2fa\": \"replace-me\", \"token\": \"\"}"

  BroadcastTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-video-downloaded

  BroadcastTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action: sns:Publish
          Resource: 
            !Ref BroadcastTopic
          Condition:
            ArnEquals:
              aws:SourceArn: !Sub arn:aws:s3:::${AWS::StackName}-uploads
      Topics: 
      - !Ref BroadcastTopic

  S3Bucket:
    Type: AWS::S3::Bucket
    DependsOn: 
    - BroadcastTopicPolicy
    Properties:
      BucketName: !Sub ${AWS::StackName}-uploads
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - Id: ExpirationRule
            Status: Enabled
            ExpirationInDays: 1
  
  DownloaderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 
        !If [ IsProd, 'ring-downloader', !Sub 'ring-downloader-${BranchName}' ]
      Description: Downloads ring videos
      Runtime: python3.8
      CodeUri: ./packages/
      Handler: init.lambda_handler
      MemorySize: 128
      Timeout: 300
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref RingCredentials
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:UpdateSecret
              Resource: !Ref RingCredentials
        - S3ReadPolicy:
            BucketName: !Ref S3Bucket
        - S3WritePolicy:
            BucketName: !Ref S3Bucket
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt BroadcastTopic.TopicName
      Events:
        ScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: 'rate(5 minutes)'
            Name: !Sub ${AWS::StackName}-downloader-schedule
            Description: Download schedule
            Enabled: true
      Environment:
        Variables:
          CREDENTIALS_SECRET_NAME: !Sub /${AWS::StackName}/RingCredentials
          BUCKET_NAME: !Ref S3Bucket
          VIDEO_HISTORY_LIMIT: 10
          TOPIC_ARN: !Ref BroadcastTopic

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DownloaderFunction}"
      RetentionInDays: 14

  ErrorMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroup
      FilterPattern: "ERROR"
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: !Sub ${AWS::StackName}
          MetricName: "ErrorCount"

  ErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if errors are over the threshold limit"
      Namespace: !Sub ${AWS::StackName}
      AlarmName: !Sub ${AWS::StackName}-ErrorAlarm
      MetricName: "ErrorCount"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Threshold: 1
      Period: 60
      Statistic: "Sum"

Outputs:
  BroadcastTopicOutput:
    Description: S3 Put object topic arn when a new ring video is uploaded
    Value: !Ref BroadcastTopic
    Export:
      Name: !Sub ${AWS::StackName}-sns-arn
  DownloadBucketOutput:
    Description: S3 bucket name where ring videos are downloaded
    Value: !Ref S3Bucket
    Export:
      Name: !Sub ${AWS::StackName}-s3bucket-name